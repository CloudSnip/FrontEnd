name: Deploy Project with Nginx

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:  # This adds the manual trigger

jobs:
  deploy:
    name: Deploy project with Nginx
    permissions:
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: 'actions/checkout@v2'
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for authentication

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}  # Set environment dynamically

      - name: Set up SSH Key and Deploy my App on Server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for authentication
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: 22
          script: |
            # Using GitHub Token for authentication with private repositories
            git config --global url."https://${{ secrets.GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
            
            # Check if the 'frontend' directory is empty or doesn't exist, then clone or pull accordingly.
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              if [ ! -d "${{ secrets.PROD_DIR }}/frontend" ] || [ ! "$(ls -A ${{ secrets.PROD_DIR }}/frontend)" ]; then
                echo "Cloning production repository..."
                git clone https://github.com/${{ github.repository }} ${{ secrets.PROD_DIR }}/frontend
                cd ${{ secrets.PROD_DIR }}/frontend
                git checkout main
              else
                echo "Production backend directory is not empty, pulling latest changes..."
                cd ${{ secrets.PROD_DIR }}/frontend
                git pull origin main  # Pull from main for production
              fi

              # Install dependencies and build the frontend
              cd ${{ secrets.PROD_DIR }}/frontend
              npm ci
              npm run build

              # Configure .env file
              ENV_FILE_CONTENT="
                      VITE_BASE_URL=${{ vars.CLIENT_DOMAIN_PROD }}/api
                    "

              echo "$ENV_FILE_CONTENT" > ${{ secrets.PROD_DIR }}/frontend/.env

              # Configure Nginx for production
              NGINX_CONFIG="
                server {
                    listen 80;
                    server_name ${{ vars.CLIENT_DOMAIN_PROD }};
                    root ${{ secrets.PROD_DIR }}/frontend/dist;
                    index index.html;

                    location / {
                        try_files \$uri \$uri/ /index.html;
                    }

                    location /api {
                        proxy_pass http://localhost:${{ vars.PORT }};
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection 'upgrade';
                        proxy_set_header Host \$host;
                        proxy_cache_bypass \$http_upgrade;
                    }
                }
              "

              echo "$NGINX_CONFIG" | sudo tee /etc/nginx/sites-available/prod.conf
              sudo ln -sf /etc/nginx/sites-available/prod.conf /etc/nginx/sites-enabled/dev.conf
              sudo nginx -t && sudo systemctl restart nginx

            elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
              if [ ! -d "${{ secrets.DEV_DIR }}/frontend" ] || [ ! "$(ls -A ${{ secrets.DEV_DIR }}/frontend)" ]; then
                echo "Cloning development repository..."
                git clone https://github.com/${{ github.repository }} ${{ secrets.DEV_DIR }}/frontend
                cd ${{ secrets.DEV_DIR }}/frontend
                git checkout develop
              else
                echo "Development backend directory is not empty, pulling latest changes..."
                cd ${{ secrets.DEV_DIR }}/frontend
                git pull origin develop  # Pull from develop for development
              fi

              # Install dependencies and build the frontend
              cd ${{ secrets.DEV_DIR }}/frontend
              npm ci
              npm run build

              # Configure .env file
              ENV_FILE_CONTENT="
                      VITE_BASE_URL=${{ vars.CLIENT_DOMAIN_DEV }}/api
                    "

              echo "$ENV_FILE_CONTENT" > ${{ secrets.DEV_DIR }}/frontend/.env

              # Configure Nginx for development
              NGINX_CONFIG="
                server {
                    listen 80;
                    server_name ${{ vars.CLIENT_DOMAIN_DEV }};
                    root ${{ secrets.DEV_DIR }}/frontend/dist;
                    index index.html;

                    location / {
                        try_files \$uri \$uri/ /index.html;
                    }

                    location /api {
                        proxy_pass http://localhost:${{ vars.PORT }};
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection 'upgrade';
                        proxy_set_header Host \$host;
                        proxy_cache_bypass \$http_upgrade;
                    }
                }
              "

              echo "$NGINX_CONFIG" | sudo tee /etc/nginx/sites-available/dev.conf
              sudo ln -sf /etc/nginx/sites-available/dev.conf /etc/nginx/sites-enabled/dev.conf
              sudo nginx -t && sudo systemctl restart nginx
            fi

      - name: Update deployment Status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}